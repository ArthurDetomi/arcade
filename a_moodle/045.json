{
  "name": "@045 10.3 Tree Altura e N\u00edvel             #done",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@045 10.3 Tree Altura e N\u00edvel #done</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"tree-altura-e-n\u00edvel-done\"><span class=\"citation\" data-cites=\"045\">@045</span> 10.3 Tree Altura e N\u00edvel #done</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/045/__capa.jpg\" /></p>\n<ul>\n<li>Entrada\n<ul>\n<li>linha 1: o serial de uma \u00e1rvore</li>\n<li>linha 2: uma lista de valores de n\u00f3</li>\n</ul></li>\n<li>Sa\u00edda\n<ul>\n<li>Para cada n\u00f3 da lista, um n\u00f3 por linha, altura e profundidade do n\u00f3 ou -1 se o n\u00f3 n\u00e3o for encontrado</li>\n</ul></li>\n</ul>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01 um\n4 # # \n4\n========\n1 1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02 dois\n1 # 0 # # \n0 1\n========\n1 2\n2 1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03 tres\n4 # 8 2 # # # \n2 8 4\n========\n1 3\n2 2\n3 1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04 quatro\n0 9 4 # # # 5 # # \n5 4 3 0 9\n========\n1 2\n1 3\n0 0\n3 1\n2 2\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 05 cinco\n8 4 # # 2 0 # # 3 # # \n0 4 8 2 3 7\n========\n1 3\n1 2\n3 1\n2 2\n1 3\n0 0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 06 seis\n2 1 0 # # # 3 # 7 # 9 # # \n9 7 3 6 1 2 0\n========\n1 4\n2 3\n3 2\n0 0\n2 2\n4 1\n1 3\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 07 dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n1 2 3 4 5 6 7 8 9\n========\n5 1\n1 5\n2 4\n2 3\n4 2\n1 4\n1 3\n3 2\n3 3\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=01 um\ninput=4 # # \n4\noutput=\"1 1\n\"\ngrade reduction=100%\n\n\ncase=02 dois\ninput=1 # 0 # # \n0 1\noutput=\"1 2\n2 1\n\"\ngrade reduction=100%\n\n\ncase=03 tres\ninput=4 # 8 2 # # # \n2 8 4\noutput=\"1 3\n2 2\n3 1\n\"\ngrade reduction=100%\n\n\ncase=04 quatro\ninput=0 9 4 # # # 5 # # \n5 4 3 0 9\noutput=\"1 2\n1 3\n0 0\n3 1\n2 2\n\"\ngrade reduction=100%\n\n\ncase=05 cinco\ninput=8 4 # # 2 0 # # 3 # # \n0 4 8 2 3 7\noutput=\"1 3\n1 2\n3 1\n2 2\n1 3\n0 0\n\"\ngrade reduction=100%\n\n\ncase=06 seis\ninput=2 1 0 # # # 3 # 7 # 9 # # \n9 7 3 6 1 2 0\noutput=\"1 4\n2 3\n3 2\n0 0\n2 2\n4 1\n1 3\n\"\ngrade reduction=100%\n\n\ncase=07 dez\ninput=1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n1 2 3 4 5 6 7 8 9\noutput=\"5 1\n1 5\n2 4\n2 3\n4 2\n1 4\n1 3\n3 2\n3 3\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.cpp.txt",
      "contents": "\n#include <iostream>\n#include <cstdlib>\n#include <sstream>\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this->value = value;\n        this->left = left;\n        this->right = right;\n    }\n};\n\nstruct BTree{\n    Node * root;\n    BTree(){\n        this->root = nullptr;\n    }\n    void clone(stringstream& ss, Node ** elo);\n\n\n    BTree(string serial){\n        stringstream ss(serial);\n        clone(ss, &root);\n    }\n\n    void _destroy(Node * node){\n        if(node == nullptr)\n            return;\n        _destroy(node->left);\n        _destroy(node->right);\n        delete node;\n    }\n\n    ~BTree(){\n        _destroy(this->root);\n    }\n\n    Node * find(Node * node, int value){\n        if(node == nullptr)\n            return nullptr;\n        if(node->value == value)\n            return node;\n        auto left = find(node->left, value);\n        if(left != nullptr)\n            return left;\n        return find(node->right, value);\n    }\n\n    Node * find(int value){\n        return find(this->root, value);\n    }\n\n    int getHeight(Node * node){\n        if(node == nullptr)\n            return 0;\n        int max = std::max(getHeight(node->left), getHeight(node->right));\n        return max + 1;\n    }\n\n    int getHeight(){\n        return getHeight(root);\n    }\n\n    int getNivel(Node * node, int nivel, int value){\n        if(node == nullptr)\n            return 0;\n        if(node->value == value)\n            return nivel;\n        auto left = getNivel(node->left, nivel + 1, value);\n        if(left != 0)\n            return left;\n        return getNivel(node->right, nivel + 1, value);\n    }\n\n    int getNivel(int value){\n        return getNivel(this->root, 1, value);\n    }\n    \n};\n\nint main(){\n    string line;\n    getline(cin, line);\n    BTree bt(line);\n    getline(cin, line);\n    stringstream ss(line);\n    int value;\n    while(ss >> value){\n        Node * node = bt.find(value);\n        cout << bt.getHeight(node) << \" \" << bt.getNivel(value) << \"\\n\";\n\n    }\n}\n\nvoid BTree::clone(stringstream& ss, Node ** elo){\n    string value;\n    ss >> value;\n    if(value == \"#\")\n        return;\n    int num;\n    stringstream(value) >> num;\n    *elo =  new Node(num);\n    clone(ss, &(*elo)->left);\n    clone(ss, &(*elo)->right);\n}\n"
    }
  ],
  "requiredFile": null
}