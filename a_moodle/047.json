{
  "name": "@047 10.4 Tree Caminhos para o n\u00f3         #doing",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@047 10.4 Tree Caminhos para o n\u00f3 #doing</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\npre > code.sourceCode { white-space: pre; position: relative; }\npre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\npre > code.sourceCode > span:empty { height: 1.2em; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\npre > code.sourceCode { white-space: pre-wrap; }\npre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\npre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"tree-caminhos-para-o-n\u00f3-doing\"><span class=\"citation\" data-cites=\"047\">@047</span> 10.4 Tree Caminhos para o n\u00f3 #doing</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<ul>\n<li>Entrada\n<ul>\n<li>linha 1: o serial de uma \u00e1rvore bin\u00e1ria</li>\n<li>linha 2: um valor de n\u00f3</li>\n</ul></li>\n<li>Sa\u00edda\n<ul>\n<li>para n\u00f3 da \u00e1rvore que tenha o valor procurado, mostre o caminho da raiz at\u00e9 o n\u00f3, indicando \u2018l\u2019 ou \u2018r\u2019 se o caminho \u00e9 pelo filho da esquerda ou da direita.</li>\n<li>Inicio com um \u2018&gt;\u2019 para o root e ponha um \u2018x\u2019 quando achar o n\u00f3.</li>\n<li>Se o valor n\u00e3o existir na \u00e1rvore, imprima valor n\u00e3o encontrado.</li>\n</ul></li>\n<li>Limita\u00e7\u00e3o\n<ul>\n<li>Voc\u00ea deve percorrer a \u00e1rvore uma \u00fanica vez para obter os caminhos.</li>\n</ul></li>\n</ul>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">struct</span> Node{</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    <span class=\"dt\">int</span> value;</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    Node * left, * right;</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>};</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>string find_path(Node * root, <span class=\"dt\">int</span> value);</span></code></pre></div>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01 um\n4 # #\n4\n========\n&gt;x\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02 dois\n1 # 0 # # \n0\n========\n&gt;rx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03 tres\n4 # 8 2 # # # \n2\n========\n&gt;rlx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04 not found\n0 9 4 # # # 5 # # \n7\n========\nvalue not fount\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=01 um\ninput=4 # #\n4\noutput=\">x\n\"\ngrade reduction=100%\n\n\ncase=02 dois\ninput=1 # 0 # # \n0\noutput=\">rx\n\"\ngrade reduction=100%\n\n\ncase=03 tres\ninput=4 # 8 2 # # # \n2\noutput=\">rlx\n\"\ngrade reduction=100%\n\n\ncase=04 not found\ninput=0 9 4 # # # 5 # # \n7\noutput=\"value not fount\n\"\ngrade reduction=100%\n"
    },
    {
      "name": ".ignore",
      "contents": "\u001b[0m\u001b[01;32mmain\u001b[0m\n\u001b[01;32msolver\u001b[0m\nsolver.cpp\n"
    },
    {
      "name": "t.vpl",
      "contents": "case=01 um\ninput=4 # #\n4\noutput=\">x\n\"\ngrade reduction=100%\n\n\ncase=02 dois\ninput=1 # 0 # # \n0\noutput=\">rx\n\"\ngrade reduction=100%\n\n\ncase=03 tres\ninput=4 # 8 2 # # # \n2\noutput=\">rlx\n\"\ngrade reduction=100%\n\n\ncase=04 not found\ninput=0 9 4 # # # 5 # # \n7\noutput=\"value not fount\n\"\ngrade reduction=100%\n\n\ncase=05 quatro\ninput=0 9 4 # # # 5 # # \n5\noutput=\">rx\n\"\ngrade reduction=100%\n\n\ncase=06 cinco\ninput=0 4 # # 2 0 # # 1 # # \n4\noutput=\">lx\n\"\ngrade reduction=100%\n\n\ncase=07 seis\ninput=2 1 5 # # # 9 # 7 # 8 # # \n9\noutput=\">rx\n\"\ngrade reduction=100%\n\n\ncase=08 dez\ninput=1 8 7 # # 5 # 6 # # 3 0 # # 9 # 4 2 # # # \n2\noutput=\">rrrlx\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "t.html",
      "contents": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>Readme</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\npre > code.sourceCode { white-space: pre; position: relative; }\npre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\npre > code.sourceCode > span:empty { height: 1.2em; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\npre > code.sourceCode { white-space: pre-wrap; }\npre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\npre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"tree-caminhos-para-o-n\u00f3-doing\"><span class=\"citation\" data-cites=\"047\">@047</span> 10.4 Tree Caminhos para o n\u00f3 #doing</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<ul>\n<li>Entrada\n<ul>\n<li>linha 1: o serial de uma \u00e1rvore bin\u00e1ria</li>\n<li>linha 2: um valor de n\u00f3</li>\n</ul></li>\n<li>Sa\u00edda\n<ul>\n<li>para n\u00f3 da \u00e1rvore que tenha o valor procurado, mostre o caminho da raiz at\u00e9 o n\u00f3, indicando \u2018l\u2019 ou \u2018r\u2019 se o caminho \u00e9 pelo filho da esquerda ou da direita.</li>\n<li>Inicio com um \u2018&gt;\u2019 para o root e ponha um \u2018x\u2019 quando achar o n\u00f3.</li>\n<li>Se o valor n\u00e3o existir na \u00e1rvore, imprima valor n\u00e3o encontrado.</li>\n</ul></li>\n<li>Limita\u00e7\u00e3o\n<ul>\n<li>Voc\u00ea deve percorrer a \u00e1rvore uma \u00fanica vez para obter os caminhos.</li>\n</ul></li>\n</ul>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">struct</span> Node{</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    <span class=\"dt\">int</span> value;</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    Node * left, * right;</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>};</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>string find_path(Node * root, <span class=\"dt\">int</span> value);</span></code></pre></div>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01 um\n4 # #\n4\n========\n&gt;x\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02 dois\n1 # 0 # # \n0\n========\n&gt;rx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03 tres\n4 # 8 2 # # # \n2\n========\n&gt;rlx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04 not found\n0 9 4 # # # 5 # # \n7\n========\nvalue not fount\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n</body>\n</html>\n"
    },
    {
      "name": ".student",
      "contents": "lib.cpp\n"
    },
    {
      "name": "lib.cpp",
      "contents": "#include <iostream>\n#include <cstdlib>\n#include <sstream>\n#include <vector>\n#include \"lib.hpp\"\n\nusing namespace std;\n\n\nstring find(Node * root, int value){\n    return \"\";\n}\n"
    },
    {
      "name": "main.cpp",
      "contents": "\n#include <iostream>\n#include <sstream>\n#include \"lib.hpp\"\nusing namespace std;\n\nstruct BTree{\n    Node * root;\n    BTree(){\n        this->root = nullptr;\n    }\n\n    void clone(stringstream& ss, Node ** elo){\n        string value;\n        ss >> value;\n        if(value == \"#\")\n            return;\n        int num;\n        stringstream(value) >> num;\n        *elo =  new Node(num);\n        clone(ss, &(*elo)->left);\n        clone(ss, &(*elo)->right);\n    }\n\n    BTree(string serial){\n        stringstream ss(serial);\n        clone(ss, &root);\n    }\n\n    void _destroy(Node * node){\n        if(node == nullptr)\n            return;\n        _destroy(node->left);\n        _destroy(node->right);\n        delete node;\n    }\n\n    ~BTree(){\n        _destroy(this->root);\n    }\n};\n\nint main(){\n    string line;\n    getline(cin, line);\n    BTree bt(line);\n    int value;\n    cin >> value;\n    auto path = find(bt.root, value);\n    cout << path << endl;\n}"
    },
    {
      "name": "lib.hpp",
      "contents": "#ifndef LIB_H\n#define LIB_H\n\n#include <iostream>\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this->value = value;\n        this->left = left;\n        this->right = right;\n    }\n};\n\nstring find(Node * root, int value);\n\n#endif"
    },
    {
      "name": "solver.cpp.txt",
      "contents": "#include <iostream>\n#include <cstdlib>\n#include <sstream>\n#include <vector>\n#include \"lib.hpp\"\n\nusing namespace std;\n#define PROF\n\n#ifdef PROF\nbool find_path(Node * node, int value, string &path, string tag = \" \"){\n    if(node == nullptr)\n        return false;\n    path += tag;\n    if(node->value == value){\n        path += \"x\";\n        return true;\n    }\n    if(find_path(node->left, value, path, \"l\") || find_path(node->right, value, path, \"r\"))\n        return true;\n    path.pop_back();\n    return false;\n}\n#else\n#endif\n\nstring find(Node * root, int value){\n#ifdef PROF\n    string path;\n    find_path(root, value, path, \">\");\n    if(path.back() == 'x')\n        return path;\n    return \"value not fount\";\n#else\n    return \"\";\n#endif\n}\n"
    }
  ],
  "requiredFile": null
}