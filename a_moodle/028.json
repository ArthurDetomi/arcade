{
  "title": "@028 08.4 Sort Quick Sort                        #todo",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@028 08.4 Sort Quick Sort #todo</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"sort-quick-sort-todo\">08.4 Sort Quick Sort #todo</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\n#include \"../libs/xpaint.h\"\n#include \"xvet.h\"\n\nvoid insertion(int * vet, int size){\n    int i, j;\n    //insertion sort\n    for(i = 1; i < size; i++){\n        xd_vet(vet, size, \"r\", i);\n        for(j = i; j > 0; j--){\n            if(vet[j] < vet[j - 1]){\n                X_SWAP(vet[j], vet[j - 1], int);\n                xd_vet(vet, size, \"y\", j - 1);\n            }else\n                break;\n        }\n        xd_vet(vet, size, \"g\", j);\n    }\n    xd_vet(vet, size, NULL);\n}\n\n//quick [C, F]\nvoid quick(int * vet, int size, int C, int F){\n    xs_partition(C, F);  \n    if(F <= C)\n        return;\n    int i = C + 1, j = F; /*guardar o pivo no C */\n    int pivo = vet[C]; /* pivo como C nao \u00e9 uma boa op\u00e7\u00e3o pro algoritmo, mas facilita a visualiza\u00e7\u00e3o */\n    xs_pivot(pivo);\n    while(1){\n        xd_vet(vet, size, \"gycm\", i, j, C, F);\n        while((vet[i] < pivo) && (i <= F)){ \n            i++;\n            xd_vet(vet, size, \"gycm\", i, j, C, F); \n        }\n        while((vet[j] > pivo) && (j >= C)){\n            xd_vet(vet, size, \"gycm\", i, j, C, F); \n            j--;\n        }\n        if(i > j)\n            break;\n        xd_vet(vet, size, \"rrcm\", i, j, C, F);\n        X_SWAP(vet[i], vet[j], int);\n        xd_vet(vet, size, \"gycm\", i, j, C, F);\n        i++;\n        j--;\n    }\n    xd_vet(vet, size, \"gycm\", i, j, C, F);\n    X_SWAP(vet[C], vet[j], int);\n    xd_vet(vet, size, \"gcym\", i, j, C, F);\n    quick(vet, size, C, j - 1);\n    quick(vet, size, j + 1, F);\n}\n\nvoid verify(int * vet, int size){\n    int i = 0;\n    for(i = 0;i < size - 1; i++){  \n        if(vet[i] <= vet[i + 1])\n            xd_vet(vet, size, \"gg\", i, i + 1);\n        else{\n            xd_vet(vet, size, \"rr\", i, i + 1);\n            break;\n        }\n    }\n}\n\nint main() {\n\n    x_open(600, 300);\n    xs_log(\"imgs/\");\n    srand(2); \n\n\n\n    int vet[30];\n    int size = sizeof(vet)/sizeof(int);\n    int i;\n    for(i = 0; i < size; i++)\n        vet[i] = rand() % 200 + 1; \n\n    quick(vet, size, 0, size - 1);\n    xs_pivot(0);\n    verify(vet, size);\n    xs_jump(1); //interativo\n    xd_vet(vet, size, \"\");\n    x_close();\n\n    return 0;\n }\n\n"
    }
  ],
  "requiredFile": null
}