{
  "name": "@046 10.2 Tree Soma e Menor               #done",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@046 10.2 Tree Soma e Menor #done</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"tree-soma-e-menor-done\"><span class=\"citation\" data-cites=\"046\">@046</span> 10.2 Tree Soma e Menor #done</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<ul>\n<li>Entrada\n<ul>\n<li>linha 1: o serial de uma \u00e1rvore</li>\n</ul></li>\n<li>Sa\u00edda\n<ul>\n<li>soma dos valores da \u00e1rvore, menor valor da \u00e1rvore</li>\n</ul></li>\n</ul>\n<p>int sum(Node * root);</p>\n<p>int min(Node * root);</p>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01 um\n4 # # \n========\n4 4\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02 dois\n1 # 0 # # \n========\n1 0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03 tres\n4 # 8 2 # # # \n========\n14 2\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04 quatro\n0 9 4 # # # 5 # # \n========\n18 0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 05 cinco\n0 4 # # 2 0 # # -3 # # \n========\n3 -3\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 06 seis\n2 0 5 # # # 3 # 7 # -9 # # \n========\n8 -9\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 07 dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n========\n45 0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=01 um\ninput=4 # # \noutput=\"4 4\n\"\ngrade reduction=100%\n\n\ncase=02 dois\ninput=1 # 0 # # \noutput=\"1 0\n\"\ngrade reduction=100%\n\n\ncase=03 tres\ninput=4 # 8 2 # # # \noutput=\"14 2\n\"\ngrade reduction=100%\n\n\ncase=04 quatro\ninput=0 9 4 # # # 5 # # \noutput=\"18 0\n\"\ngrade reduction=100%\n\n\ncase=05 cinco\ninput=0 4 # # 2 0 # # -3 # # \noutput=\"3 -3\n\"\ngrade reduction=100%\n\n\ncase=06 seis\ninput=2 0 5 # # # 3 # 7 # -9 # # \noutput=\"8 -9\n\"\ngrade reduction=100%\n\n\ncase=07 dez\ninput=1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \noutput=\"45 0\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.cpp.txt",
      "contents": "\n#include <iostream>\n#include <cstdlib>\n#include <sstream>\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this->value = value;\n        this->left = left;\n        this->right = right;\n    }\n};\n\nstruct BTree{\n    Node * root;\n    BTree(){\n        this->root = nullptr;\n    }\n\n    void clone(stringstream& ss, Node ** elo){\n        string value;\n        ss >> value;\n        if(value == \"#\")\n            return;\n        int num;\n        stringstream(value) >> num;\n        *elo =  new Node(num);\n        clone(ss, &(*elo)->left);\n        clone(ss, &(*elo)->right);\n    }\n\n    BTree(string serial){\n        stringstream ss(serial);\n        clone(ss, &root);\n    }\n\n    void _destroy(Node * node){\n        if(node == nullptr)\n            return;\n        _destroy(node->left);\n        _destroy(node->right);\n        delete node;\n    }\n\n    ~BTree(){\n        _destroy(this->root);\n    }\n\n    int getMin(Node * node){\n        if(node == nullptr)\n            return 0;\n        int v = node->value;\n        if(node->left != nullptr)\n            v = std::min(getMin(node->left), v);\n        if(node->right != nullptr)\n            v = std::min(getMin(node->right), v);\n        return v;\n    }\n\n    int getMin(){\n        return getMin(root);\n    }\n\n    int getSum(Node * node){\n        if(node == nullptr)\n            return 0;\n        return node->value + getSum(node->left) + getSum(node->right);\n    }\n\n    int getSum(){\n        return getSum(root);\n    }\n};\n\nint main(){\n    string line;\n    getline(cin, line);\n    BTree bt(line);\n    getline(cin, line);\n    cout << bt.getSum() << \" \" << bt.getMin() << \"\\n\";\n}"
    }
  ],
  "requiredFile": null
}