{
  "title": "@008 04.2 Labirinto Resolvendo com recurs\u00e3o      #todo",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@008 04.2 Labirinto Resolvendo com recurs\u00e3o #todo</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\npre > code.sourceCode { white-space: pre; position: relative; }\npre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\npre > code.sourceCode > span:empty { height: 1.2em; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\npre > code.sourceCode { white-space: pre-wrap; }\npre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\npre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"labirinto-resolvendo-com-recurs\u00e3o-todo\">04.2 Labirinto Resolvendo com recurs\u00e3o #todo</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p>fazer os testes. Usa o modelo do flood fill para passar in\u00edcio e fim - pedir um vetor com os pontos do caminho - pedir pedir matriz marcada com a sa\u00edda - sugerir funcao que retorne uma lista com o caminho - no algoritmo de pilha, a pilha j\u00e1 \u00e9 o caminho - na recurs\u00e3o, a pilha recursiva j\u00e1 \u00e9 o caminho - pedir o vetor de pontos, para for\u00e7ar retornar a lista - dar estrutura b\u00e1sica de - carregar matriz - funcao de gerar os vizinhos - struct LC com construtor - Colocar testes - Pode ser resolvido - recursivo - pilha - fila</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a>list&lt;LC&gt; find_path(<span class=\"dt\">bool</span> * mat, <span class=\"dt\">int</span> nl, <span class=\"dt\">int</span> nc, LC first, LC last);</span></code></pre></div>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "\n"
    },
    {
      "name": "solver_rec.c.txt",
      "contents": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdlib.h>//srand e rand\n#include <time.h>\n\ntypedef struct{\n    int l, c;\n} Indice;\n\n\nint nl, nc;\nconst char WALL = '#';\nconst char OPEN = ' ';\n\nconst int delta_l[] = {0, -1, 0, 1};\nconst int delta_c[] = {-1, 0, 1, 0};\nconst int N_NEIBS = 4;\n\n#define SWAP(a, b, type) do{type SWAP = a; a = b; b = SWAP;}while(0)\n\nbool is_inside(Indice ind){\n    return (ind.l >= 0 && ind.l < nl && ind.c >= 0 && ind.c < nc);\n}\n\nbool has_value(char * mat, int l, int c, char value){\n    if(l < 0 || l >= nl || c < 0 || c >= nc)\n        return false;\n    return mat[l * nc + c] == value;    \n}\n\nbool search(char * mat, bool * vis, Indice pos, Indice pend){\n    if(!is_inside(pos) || (mat[pos.l * nc + pos.c] == WALL) || vis[pos.l * nc + pos.c])\n        return false;\n    vis[pos.l * nc + pos.c] = true;\n    bool is_path = false;\n    if((pos.l == pend.l) && (pos.c == pend.c))\n        is_path = true;\n    else{\n        for(size_t i = 0; i < 4; i++){\n            if(search(mat, vis, (Indice){pos.l + delta_l[i], pos.c + delta_c[i]}, pend)){\n                is_path = true;\n                break;\n            }\n        }\n    }\n    if(is_path){\n        mat[pos.l * nc + pos.c] = '.';\n        printf(\"[%d %d]\", pos.l, pos.c);\n        return true;\n    }\n    return false;   \n}\n\nint main(){\n    scanf(\"%d %d\", &nl, &nc);\n    Indice pbegin;\n    scanf(\"%d %d\", &pbegin.l, &pbegin.c);\n    Indice pend;\n    scanf(\"%d %d\", &pend.l, &pend.c);\n    getchar(); //remove \\n\n\n    char mat[nl * nc]; //reading mat\n    {\n        char line[nc + 2]; //+1 para \\0 e +1 para \\n que o fgets pega\n        for(int i = 0; i < nl; i++){\n            fgets(line, sizeof(line), stdin);\n            memcpy(&mat[i * nc], line, nc);\n        }\n    }\n    bool vis[nl * nc]; //initialize visitados\n    for(int i = 0; i < nl * nc; i++)\n        vis[i] = false;\n    search(mat, vis, pend, pbegin);\n\n    printf(\"\\n%d %d\\n\", nl, nc);\n    {\n        char line[nc + 1];\n        line[nc] = '\\0';\n        for(int i = 0; i < nl; i++){\n            memcpy(line, &mat[i * nc], nc);\n            puts(line);\n        }\n    }\n}"
    }
  ],
  "requiredFile": null
}