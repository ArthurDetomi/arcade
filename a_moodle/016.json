{
  "name": "@016 05.1 Build Vetor din\u00e2mico                   #doing",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@016 05.1 Build Vetor din\u00e2mico #doing</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\npre > code.sourceCode { white-space: pre; position: relative; }\npre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\npre > code.sourceCode > span:empty { height: 1.2em; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\npre > code.sourceCode { white-space: pre-wrap; }\npre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\npre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"build-vetor-din\u00e2mico-doing\"><span class=\"citation\" data-cites=\"016\">@016</span> 05.1 Build Vetor din\u00e2mico #doing</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p>implemente as seguintes fun\u00e7\u00f5es do vetor dinamico</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"co\">#__case create</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"va\">$init</span> <span class=\"ex\">3</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a><span class=\"ex\">size</span>:0 capacity:3</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"co\">#__case add</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"va\">$init</span> <span class=\"ex\">5</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a><span class=\"bu\">[ ]</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a><span class=\"va\">$add</span> <span class=\"ex\">3</span> 4 5 1</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a><span class=\"bu\">[</span> 3 4 5 1<span class=\"bu\"> ]</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a><span class=\"co\">#__case tentar estourar</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\"></a><span class=\"va\">$add</span> <span class=\"ex\">7</span> 3 2 1</span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\"></a><span class=\"bu\">[</span> 3 4 5 1 7<span class=\"bu\"> ]</span></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\"></a><span class=\"va\">$end</span></span></code></pre></div>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=01 create\ninput=init 3\nstatus\nend\noutput=\"$init 3\n$status\nsize:0 capacity:3\n$end\n\"\n\n\ncase=02 add\ninput=init 5\nshow\nadd 3 4 5 1\nshow\nend\noutput=\"$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$end\n\"\n\n\ncase=03 tentar estourar\ninput=init 5\nshow\nadd 3 4 5 1\nshow\nadd 7 3 2 1\nshow\nend\noutput=\"$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$add 7 3 2 1\n$show\n[ 3 4 5 1 7 ]\n$end\n\"\n"
    },
    {
      "name": "code.cpp",
      "contents": "#include <iostream>\n#include <sstream>\nusing namespace std;\n\n//#define PROF\n\nstruct Vector{\n    int capacity;\n    int size;\n    int * data;\n};\n\nVector * vector_create(int capacity){\n    #ifdef PROF\n    Vector * v = new Vector;\n    v->capacity = capacity;\n    v->size = 0;\n    v->data = new int[capacity];\n    return v;\n    #else\n    return nullptr;\n    #endif\n}\n\nvoid vector_add(Vector * vector, int value){\n    #ifdef PROF\n    if(vector->size < vector->capacity){\n        vector->data[vector->size] = value;\n        vector->size++;\n    }\n    #else\n    #endif\n}\n\n//retorne a string no formato \n// [ a b c ]\nstring vector_show(Vector * vector){\n    #ifdef PROF\n    stringstream ss;\n    ss << \"[ \";\n    for(int i = 0; i < vector->size; i++)\n        ss << vector->data[i] << \" \";\n    ss << \"]\";\n    return ss.str();\n    #else\n    return \"[ ]\";\n    #endif\n}\n\n\n/* NAO MEXA DAQUI PRA BAIXO */\nint main(){\n    string line, cmd;\n    Vector * v;\n    while(true){\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n        stringstream ss(line);\n        ss >> cmd;\n        if(cmd == \"end\")\n            break;\n        else if(cmd == \"init\"){\n            int value;\n            ss >> value;\n            v = vector_create(value);\n        }\n        else if(cmd == \"status\"){\n            cout << \"size:\" << v->size << \" capacity:\" << v->capacity << \"\\n\";\n        }\n        else if(cmd == \"add\"){\n            int value;\n            while(ss >> value){\n                vector_add(v, value);\n            }\n        }\n        else if(cmd == \"show\"){\n            cout << vector_show(v) << endl;\n        }\n    }\n}"
    },
    {
      "name": "teste.vpl",
      "contents": "case=01 init vazio\ninput=show\nend\noutput=\"$show\n[ ]\n$end\n\"\ngrade reduction=10%\n\n\ncase=02 add\ninput=show\nadd 3 4 5 1\nshow\nend\noutput=\"$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$end\n\"\n\n\ncase=03 add mais\ninput=show\nadd 3 4 5 1\nshow\nshow\nend\noutput=\"$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]$add 7\n$show\n[ 3 4 5 1 7 ]\n$end\n\"\n"
    }
  ],
  "requiredFile": null
}