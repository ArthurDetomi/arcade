{
  "title": "@044 @044 10.1 Tree Serialize and Show         #done",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@044 @044 10.1 Tree Serialize and Show #done</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"tree-serialize-and-show-done\"><span class=\"citation\" data-cites=\"044\">@044</span> 10.1 Tree Serialize and Show #done</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<ul>\n<li>Leia a string que representa a \u00e1rvore serializada e mostre a \u00e1rvore.</li>\n<li>Para apresentar a \u00e1rvore utilize a sequ\u00eancia em pr\u00e9-ordem.</li>\n<li>Utilize um . para cada n\u00edvel do n\u00f3.</li>\n</ul>\n<p>Voc\u00ea pode entender a l\u00f3gica de serializa\u00e7\u00e3o no seguinte <a href=\"https://www.geeksforgeeks.org/serialize-deserialize-binary-tree/\">link</a>.</p>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; um\n4 # # \n========\n4\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dois\n1 # 0 # # \n========\n1\n.#\n.0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; tres\n4 # 8 2 # # # \n========\n4\n.#\n.8\n..2\n..#\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; quatro\n0 9 4 # # # 5 # # \n========\n0\n.9\n..4\n..#\n.5\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; cinco\n0 4 # # 2 0 # # 3 # # \n========\n0\n.4\n.2\n..0\n..3\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; seis\n2 0 0 # # # 3 # 7 # 9 # # \n========\n2\n.0\n..0\n..#\n.3\n..#\n..7\n...#\n...9\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n========\n1\n.8\n..7\n..4\n...#\n...6\n.5\n..0\n..9\n...#\n...3\n....2\n....#\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=00 um\ninput=4 # # \noutput=\"4\n\"\ngrade reduction=100%\n\n\ncase=01 dois\ninput=1 # 0 # # \noutput=\"1\n.#\n.0\n\"\ngrade reduction=100%\n\n\ncase=02 tres\ninput=4 # 8 2 # # # \noutput=\"4\n.#\n.8\n..2\n..#\n\"\ngrade reduction=100%\n\n\ncase=03 quatro\ninput=0 9 4 # # # 5 # # \noutput=\"0\n.9\n..4\n..#\n.5\n\"\ngrade reduction=100%\n\n\ncase=04 cinco\ninput=0 4 # # 2 0 # # 3 # # \noutput=\"0\n.4\n.2\n..0\n..3\n\"\ngrade reduction=100%\n\n\ncase=05 seis\ninput=2 0 0 # # # 3 # 7 # 9 # # \noutput=\"2\n.0\n..0\n..#\n.3\n..#\n..7\n...#\n...9\n\"\ngrade reduction=100%\n\n\ncase=06 dez\ninput=1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \noutput=\"1\n.8\n..7\n..4\n...#\n...6\n.5\n..0\n..9\n...#\n...3\n....2\n....#\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.cpp.txt",
      "contents": "\n#include <iostream>\n#include <cstdlib>\n#include <sstream>\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this->value = value;\n        this->left = left;\n        this->right = right;\n    }\n};\n\nstruct BTree{\n    Node * root;\n    BTree(){\n        this->root = nullptr;\n    }\n\n    void clone(stringstream& ss, Node ** elo){\n        string value;\n        ss >> value;\n        if(value == \"#\")\n            return;\n        int num;\n        stringstream(value) >> num;\n        *elo =  new Node(num);\n        clone(ss, &(**elo).left);\n        clone(ss, &(*elo)->right);\n    }\n\n    BTree(string serial){\n        stringstream ss(serial);\n        clone(ss, &root);\n    }\n\n    void _destroy(Node * node){\n        if(node == nullptr)\n            return;\n        _destroy(node->left);\n        _destroy(node->right);\n        delete node;\n    }\n\n    ~BTree(){\n        _destroy(this->root);\n    }\n    \n\n\n\n\n    void show(Node * node, int nivel){\n        if(node == nullptr){\n            cout << string(nivel, '.') << \"#\\n\";\n            return;\n        }\n        cout << string(nivel, '.') << node->value << \"\\n\";\n        if(node->left == nullptr && node->right == nullptr)\n            return;\n        show(node->left, nivel + 1);\n        show(node->right, nivel + 1);\n    }\n\n    void show(){\n        show(root, 0);\n    }\n};\n\n\n\n\nint main(){\n    string line;\n    getline(cin, line);\n    BTree bt(line);\n    bt.show();\n/* \n    {\n        stringstream ss;\n        ss << \"hoje, dia \" << 13 << \" estou pesando \" << 85.10 << \"kilos\\n\";\n        cout << ss.str();\n    }\n    {\n        stringstream ss(\"banana 1 bananeira goiaba 4 goiabeira uva 6 parreira\");\n        string fruta;\n        int qtd;\n        string fruteira;\n        while(ss >> fruta >> qtd >> fruteira){\n            cout << fruta << qtd << fruteira << \"\\n\";\n        }\n\n        float valor;\n        stringstream(\"5.42\") >> valor;\n    }     \n */\n\n\n\n}"
    }
  ],
  "requiredFile": null
}