{
    "title": "@002 L2 - {human} distance create",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@002 L2 - {human} distance create</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <link rel=\"stylesheet\" href=\"/tmp/tmp_ylelcez.css\" />\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"l2---human-distance-create\"><span class=\"citation\"\ndata-cites=\"002\">@002</span> L2 - {human} distance create</h2>\n<p><img\nsrc=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/002/cover.jpg\" /></p>\n<p>Tente criar um gerador de problemas Limite. Voc\u00ea pode seguir a\nseguinte sequ\u00eancia:</p>\n<ul>\n<li>Utilize argc e argv para receber o tamanho da string e o valor de\nlimite desejado.</li>\n</ul>\n<pre><code>./solver 8 4\n\nproblema: 42..0..3. 4\nresposta: 423104231</code></pre>\n<ul>\n<li>Inicie a string com todos os valores vazios.</li>\n<li>Gere uma solu\u00e7\u00e3o para essa string vazia, mas ao inv\u00e9s de testar os\nn\u00fameros sequencialmente de 0 a D em cada posi\u00e7\u00e3o, coloque-os em um vetor\ne os embaralhe.</li>\n<li>Crie uma lista com todas as posi\u00e7\u00f5es v\u00e1lidas da resposta e\nembaralhe.\n<ul>\n<li>para cada posi\u00e7\u00e3o\n<ul>\n<li>se remover esse index, gerar apenas uma \u00fanica solu\u00e7\u00e3o para o\nproblema, remova o index</li>\n</ul></li>\n</ul></li>\n</ul>\n<!--FILTER solver.cpp cpp-->\n<div class=\"sourceCode\" id=\"cb2\"><pre\nclass=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">const</span> <span class=\"dt\">char</span> EMPTY <span class=\"op\">=</span> <span class=\"ch\">&#39;.&#39;</span><span class=\"op\">;</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//metodo gen\u00e9rico para formatar um container como texto</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">template</span> <span class=\"op\">&lt;</span><span class=\"kw\">class</span> T<span class=\"op\">&gt;</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">std::</span>string<span class=\"op\"> </span>fmt<span class=\"op\">(</span>T data<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>ostringstream<span class=\"op\"> </span>ss<span class=\"op\">;</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ss <span class=\"op\">&lt;&lt;</span> <span class=\"st\">&quot;[&quot;</span><span class=\"op\">;</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> <span class=\"op\">(</span><span class=\"kw\">auto</span> it <span class=\"op\">=</span> data<span class=\"op\">.</span>begin<span class=\"op\">();</span> it <span class=\"op\">!=</span> data<span class=\"op\">.</span>end<span class=\"op\">();</span> <span class=\"op\">++</span>it<span class=\"op\">)</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        ss <span class=\"op\">&lt;&lt;</span> <span class=\"op\">(</span>it <span class=\"op\">!=</span> data<span class=\"op\">.</span>begin<span class=\"op\">()</span> <span class=\"op\">?</span> <span class=\"st\">&quot;, &quot;</span> <span class=\"op\">:</span> <span class=\"st\">&quot;&quot;</span><span class=\"op\">)</span> <span class=\"op\">&lt;&lt;</span> <span class=\"op\">*</span>it<span class=\"op\">;</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ss <span class=\"op\">&lt;&lt;</span> <span class=\"st\">&quot;]&quot;</span><span class=\"op\">;</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> ss<span class=\"op\">.</span>str<span class=\"op\">();</span></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//gera um vector generico de [beg, end[</span></span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">template</span> <span class=\"op\">&lt;</span><span class=\"kw\">class</span> T<span class=\"op\">&gt;</span></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">std::</span>vector<span class=\"op\">&lt;</span>T<span class=\"op\">&gt;</span> range<span class=\"op\">(</span>T _beg<span class=\"op\">,</span> T _end<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>vector<span class=\"op\">&lt;</span>T<span class=\"op\">&gt;</span> output<span class=\"op\">;</span></span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> <span class=\"op\">(</span><span class=\"dt\">char</span> c <span class=\"op\">=</span> _beg<span class=\"op\">;</span> c <span class=\"op\">&lt;</span> _end<span class=\"op\">;</span> c<span class=\"op\">++)</span></span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        output<span class=\"op\">.</span>push_back<span class=\"op\">(</span>c<span class=\"op\">);</span></span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> output<span class=\"op\">;</span></span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb2-22\"><a href=\"#cb2-22\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-23\"><a href=\"#cb2-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">//embaralha e retorna um vetor generico</span></span>\n<span id=\"cb2-24\"><a href=\"#cb2-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">template</span> <span class=\"op\">&lt;</span><span class=\"kw\">class</span> T<span class=\"op\">&gt;</span></span>\n<span id=\"cb2-25\"><a href=\"#cb2-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">std::</span>vector<span class=\"op\">&lt;</span>T<span class=\"op\">&gt;</span> shuffle<span class=\"op\">(</span><span class=\"bu\">std::</span>vector<span class=\"op\">&lt;</span>T<span class=\"op\">&gt;</span> vet<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-26\"><a href=\"#cb2-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>random_shuffle<span class=\"op\">(</span>vet<span class=\"op\">.</span>begin<span class=\"op\">(),</span> vet<span class=\"op\">.</span>end<span class=\"op\">());</span></span>\n<span id=\"cb2-27\"><a href=\"#cb2-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> vet<span class=\"op\">;</span></span>\n<span id=\"cb2-28\"><a href=\"#cb2-28\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb2-29\"><a href=\"#cb2-29\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-30\"><a href=\"#cb2-30\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">struct</span> Problem <span class=\"op\">{</span></span>\n<span id=\"cb2-31\"><a href=\"#cb2-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>string<span class=\"op\"> </span>data<span class=\"op\">;</span></span>\n<span id=\"cb2-32\"><a href=\"#cb2-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">int</span> lim<span class=\"op\">;</span></span>\n<span id=\"cb2-33\"><a href=\"#cb2-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>vector<span class=\"op\">&lt;</span><span class=\"dt\">int</span><span class=\"op\">&gt;</span> holes<span class=\"op\">;</span> <span class=\"co\">//posicoes a preencher</span></span>\n<span id=\"cb2-34\"><a href=\"#cb2-34\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-35\"><a href=\"#cb2-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Problem<span class=\"op\">(</span><span class=\"bu\">std::</span>string<span class=\"op\"> </span>data<span class=\"op\">,</span> <span class=\"dt\">int</span> lim<span class=\"op\">)</span> <span class=\"op\">{</span> <span class=\"op\">...</span> <span class=\"op\">}</span></span>\n<span id=\"cb2-36\"><a href=\"#cb2-36\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-37\"><a href=\"#cb2-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">//se posso colocar esse valor em data[index]</span></span>\n<span id=\"cb2-38\"><a href=\"#cb2-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">bool</span> fit<span class=\"op\">(</span><span class=\"dt\">int</span> index<span class=\"op\">,</span> <span class=\"dt\">char</span> value<span class=\"op\">)</span> <span class=\"op\">{</span> <span class=\"op\">...</span> <span class=\"op\">}</span></span>\n<span id=\"cb2-39\"><a href=\"#cb2-39\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-40\"><a href=\"#cb2-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">//tenta resolver o problema recursivamente retornando na primeira solu\u00e7\u00e3o encontrada</span></span>\n<span id=\"cb2-41\"><a href=\"#cb2-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">bool</span> solve<span class=\"op\">(</span><span class=\"dt\">int</span> hindex<span class=\"op\">)</span> <span class=\"op\">{</span> <span class=\"op\">...</span> <span class=\"op\">}</span></span>\n<span id=\"cb2-42\"><a href=\"#cb2-42\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-43\"><a href=\"#cb2-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">//tenta resoler o problema recursivamente contando quantas solu\u00e7\u00f5es existem</span></span>\n<span id=\"cb2-44\"><a href=\"#cb2-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">int</span> count_solutions<span class=\"op\">(</span><span class=\"dt\">int</span> hindex<span class=\"op\">)</span> <span class=\"op\">{</span> <span class=\"op\">...</span> <span class=\"op\">}</span></span>\n<span id=\"cb2-45\"><a href=\"#cb2-45\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-46\"><a href=\"#cb2-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">//verifica se remover essa posi\u00e7\u00e3o, gera uma \u00fanica solu\u00e7\u00e3o</span></span>\n<span id=\"cb2-47\"><a href=\"#cb2-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">bool</span> can_remove<span class=\"op\">(</span><span class=\"dt\">int</span> index<span class=\"op\">)</span> <span class=\"op\">{</span> <span class=\"op\">...</span> <span class=\"op\">}</span></span>\n<span id=\"cb2-48\"><a href=\"#cb2-48\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-49\"><a href=\"#cb2-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">//pega a lista de todas as posi\u00e7\u00f5es e embaralha</span></span>\n<span id=\"cb2-50\"><a href=\"#cb2-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">//para cada posi\u00e7\u00e3o, se remov\u00ea-la gera um problema com \u00fanica solu\u00e7\u00e3o</span></span>\n<span id=\"cb2-51\"><a href=\"#cb2-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">//ent\u00e3o remova</span></span>\n<span id=\"cb2-52\"><a href=\"#cb2-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">void</span> fill_holes<span class=\"op\">()</span> <span class=\"op\">{</span> <span class=\"op\">...</span> <span class=\"op\">}</span></span>\n<span id=\"cb2-53\"><a href=\"#cb2-53\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">};</span></span>\n<span id=\"cb2-54\"><a href=\"#cb2-54\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-55\"><a href=\"#cb2-55\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-56\"><a href=\"#cb2-56\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">int</span> main<span class=\"op\">(</span><span class=\"dt\">int</span> argc<span class=\"op\">,</span> <span class=\"dt\">char</span> <span class=\"op\">*</span> argv<span class=\"op\">[])</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-57\"><a href=\"#cb2-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>    srand<span class=\"op\">(</span>time<span class=\"op\">(</span><span class=\"dv\">0</span><span class=\"op\">));</span></span>\n<span id=\"cb2-58\"><a href=\"#cb2-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">int</span> size <span class=\"op\">{</span> <span class=\"dv\">5</span> <span class=\"op\">},</span> lim <span class=\"op\">{</span> <span class=\"dv\">3</span> <span class=\"op\">};</span></span>\n<span id=\"cb2-59\"><a href=\"#cb2-59\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">(</span>argc <span class=\"op\">&lt;</span> <span class=\"dv\">3</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-60\"><a href=\"#cb2-60\" aria-hidden=\"true\" tabindex=\"-1\"></a>        puts<span class=\"op\">(</span><span class=\"st\">&quot;Passe size e lim como argumentos&quot;</span><span class=\"op\">);</span></span>\n<span id=\"cb2-61\"><a href=\"#cb2-61\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb2-62\"><a href=\"#cb2-62\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb2-63\"><a href=\"#cb2-63\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>istringstream<span class=\"op\">(</span>argv<span class=\"op\">[</span><span class=\"dv\">1</span><span class=\"op\">])</span> <span class=\"op\">&gt;&gt;</span> size<span class=\"op\">;</span></span>\n<span id=\"cb2-64\"><a href=\"#cb2-64\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>istringstream<span class=\"op\">(</span>argv<span class=\"op\">[</span><span class=\"dv\">2</span><span class=\"op\">])</span> <span class=\"op\">&gt;&gt;</span> lim<span class=\"op\">;</span></span>\n<span id=\"cb2-65\"><a href=\"#cb2-65\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>cout<span class=\"op\"> &lt;&lt;</span> size <span class=\"op\">&lt;&lt;</span> <span class=\"ch\">&#39; &#39;</span> <span class=\"op\">&lt;&lt;</span> lim <span class=\"op\">&lt;&lt;</span> <span class=\"ch\">&#39;</span><span class=\"sc\">\\n</span><span class=\"ch\">&#39;</span><span class=\"op\">;</span></span>\n<span id=\"cb2-66\"><a href=\"#cb2-66\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-67\"><a href=\"#cb2-67\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Problem prob<span class=\"op\">(</span><span class=\"bu\">std::</span>string<span class=\"op\">(</span>size<span class=\"op\">,</span> EMPTY<span class=\"op\">),</span> lim<span class=\"op\">);</span></span>\n<span id=\"cb2-68\"><a href=\"#cb2-68\" aria-hidden=\"true\" tabindex=\"-1\"></a>    prob<span class=\"op\">.</span>solve<span class=\"op\">(</span><span class=\"dv\">0</span><span class=\"op\">);</span></span>\n<span id=\"cb2-69\"><a href=\"#cb2-69\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>cout<span class=\"op\"> &lt;&lt;</span> prob<span class=\"op\">.</span>data <span class=\"op\">&lt;&lt;</span> <span class=\"st\">&quot;</span><span class=\"sc\">\\n</span><span class=\"st\">&quot;</span><span class=\"op\">;</span></span>\n<span id=\"cb2-70\"><a href=\"#cb2-70\" aria-hidden=\"true\" tabindex=\"-1\"></a>    prob<span class=\"op\">.</span>fill_holes<span class=\"op\">();</span></span>\n<span id=\"cb2-71\"><a href=\"#cb2-71\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>cout<span class=\"op\"> &lt;&lt;</span> prob<span class=\"op\">.</span>data <span class=\"op\">&lt;&lt;</span> <span class=\"ch\">&#39;</span><span class=\"sc\">\\n</span><span class=\"ch\">&#39;</span><span class=\"op\">;</span></span>\n<span id=\"cb2-72\"><a href=\"#cb2-72\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<!--FILTER_END-->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": []
}
