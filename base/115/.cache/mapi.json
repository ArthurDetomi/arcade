{
    "title": "@115 L1 - {human} png lab {optional}",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@115 L1 - {human} png lab {optional}</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n  </style>\n  <link rel=\"stylesheet\" href=\"/tmp/tmp1mhjnay8.css\" />\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"l1---human-png-lab-optional\"><span class=\"citation\"\ndata-cites=\"115\">@115</span> L1 - {human} png lab {optional}</h2>\n<h2 id=\"qxcode\"><span class=\"citation\"\ndata-cites=\"qxcode\">@qxcode</span></h2>\n<p>Voc\u00ea pode utilizar esse c\u00f3digo para gerar a visualiza\u00e7\u00e3o do seu\nlabirinto com o utilizando a biblioteca de desenho que j\u00e1 est\u00e1 nessa\npasta.</p>\n<p><img\nsrc=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/115/lab.png\" /></p>\n<p>Nesse caso, a figura \u00e9 carregada do arquivo de texto com o\nlabirinto.</p>\n<p>Voc\u00ea pode compilar o c\u00f3digo e passar o seu labirinto em txt por\npar\u00e2metro.</p>\n<p>Seu arquivo de texto deve ter as dimens\u00f5es na primeira linha e o\nlabirinto deve ser composto de \u2018#\u2019 e \u2019 \u2019 tal qual o arquivo exemplo da\npasta.</p>\n<pre><code>gcc -Wall make_img.c -o make_img\n./make_img seu_lab.txt</code></pre>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "encoding": 0
        }
    ],
    "keep": [
        {
            "name": "main.cpp",
            "contents": "#include <iostream>\n#include <vector>\n#include <fstream>\n#define XPAINT\n#include \"xpaint.h\"\n\nvoid create_img(std::vector<std::string> mat) {\n    int nl = mat.size();\n    int nc = mat[0].size();\n    x_open(nc * 30, nl * 30, \"lab\");\n    x_grid_init(30, 1);\n    x_color_set(WHITE);\n    x_clear();\n    for(int l = 0; l < nl; l++) {\n        for(int c = 0; c < nc; c++) {\n            if(mat[l][c] == '#'){\n                x_color_set(BLACK);\n                x_grid_square(l, c);\n            } else if(mat[l][c] == ' ') {\n                x_color_set(WHITE);\n                x_grid_square(l, c);\n            }\n        }\n    }\n    x_save();\n    x_close();\n}\n\nstd::vector<std::string> load_mat_from_file(std::string path) {\n    std::ifstream ifs(path);\n    if(!ifs.is_open()) {\n        std::cout << \"arquivo nao encontrado\\n\";\n        exit(1);\n    }\n    int nl { 0 }, nc { 0 };\n    ifs >> nl >> nc;\n    std::vector<std::string> mat(nl, \"\");\n    for (auto& line : mat)\n        std::getline(ifs, line);\n    return mat;\n}\n\nint main(int argc, char * argv[]){\n\n    if(argc == 1) {\n        puts(\"you need pass the path to your lab as argument\");\n        return 1;\n    }\n\n    auto mat = load_mat_from_file(argv[1]);\n    create_img(nl, nc, mat);\n    return 0;\n}\n",
            "encoding": 0
        }
    ],
    "required": []
}
