{
  "title": "@002 01.3 Princesa V3                       #done",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@002 01.3 Princesa V3 #done</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\npre > code.sourceCode { white-space: pre; position: relative; }\npre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\npre > code.sourceCode > span:empty { height: 1.2em; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\npre > code.sourceCode { white-space: pre-wrap; }\npre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\npre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"princesa-v3-done\">01.3 Princesa V3 #done</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><a href=\"https://www.youtube.com/watch?v=uCsD3ZGzMgE\"><img src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/002/__capa.jpg\" /></a></p>\n<p>Esse jogo \u00e9 equivalente ao V2 por\u00e9m com duas diferen\u00e7as. - Ap\u00f3s matar, a espada salta um n\u00famero de vezes igual ao \u00faltimo que utilizou a espada. Se o elemento que matou \u00e9 positivo, a espada salta para direita, se n\u00e3o, salta para esquerda.</p>\n<hr />\n<ul>\n<li>Entrada:\n<ul>\n<li>Os valores de <strong>N</strong> e <strong>E</strong> e <strong>F</strong> na primeira linha.</li>\n</ul></li>\n<li>Sa\u00edda:\n<ul>\n<li>Etapa a etapa, os elementos que est\u00e3o vivos na fila circular.\n<ul>\n<li>Indicando com um &gt; ou &lt; quem est\u00e1 com a espada dependendo se \u00e9 positivo ou negativo.</li>\n</ul></li>\n</ul></li>\n</ul>\n<hr />\n<h2 id=\"implementa\u00e7\u00e3o-com-lista\">Implementa\u00e7\u00e3o com lista</h2>\n<p>Resolva novamente o problema cabe\u00e7as v\u00e3o rolar V3 utilizando uma lista ligada circular no lugar do vetor.</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">struct</span> Node{</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    <span class=\"dt\">int</span> value;</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    Node * next;</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    Node * prev;</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>};</span></code></pre></div>\n<hr />\n<h2 id=\"testes\">Testes:</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01\n3 1 1\n========\n[ 1&gt; -2 3 ]\n[ 1 3&gt; ]\n[ 3&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02\n3 2 1\n========\n[ 1 &lt;-2 3 ]\n[ &lt;-2 3 ]\n[ &lt;-2 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03\n3 3 1\n========\n[ 1 -2 3&gt; ]\n[ &lt;-2 3 ]\n[ &lt;-2 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04\n3 1 -1\n========\n[ &lt;-1 2 -3 ]\n[ -1 2&gt; ]\n[ 2&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 05\n3 2 -1\n========\n[ -1 2&gt; -3 ]\n[ -1 2&gt; ]\n[ 2&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 06\n3 3 -1\n========\n[ -1 2 &lt;-3 ]\n[ &lt;-1 -3 ]\n[ &lt;-1 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=00\ninput=3 1 1\noutput=\"[ 1> -2 3 ]\n[ 1 3> ]\n[ 3> ]\n\"\ngrade reduction=100%\n\n\ncase=01\ninput=3 2 1\noutput=\"[ 1 <-2 3 ]\n[ <-2 3 ]\n[ <-2 ]\n\"\ngrade reduction=100%\n\n\ncase=02\ninput=3 3 1\noutput=\"[ 1 -2 3> ]\n[ <-2 3 ]\n[ <-2 ]\n\"\ngrade reduction=100%\n\n\ncase=03\ninput=3 1 -1\noutput=\"[ <-1 2 -3 ]\n[ -1 2> ]\n[ 2> ]\n\"\ngrade reduction=100%\n\n\ncase=04\ninput=3 2 -1\noutput=\"[ -1 2> -3 ]\n[ -1 2> ]\n[ 2> ]\n\"\ngrade reduction=100%\n\n\ncase=05\ninput=3 3 -1\noutput=\"[ -1 2 <-3 ]\n[ <-1 -3 ]\n[ <-1 ]\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\n#include <stdbool.h>\n\nconst int MORTO = 0;\n\nint walk(int pos, int size, int dir){\n    if(dir == 1)\n        return (pos + 1) % size;\n    return (pos + size - 1) % size;\n}\n\n//acha o proximo elemento vivo a partir de inicio + 1\n//dir \u00e9 1 ou -1\nint achar_vivo(int vet[], int size, int inicio, int dir){\n    int pos = walk(inicio, size, dir);\n    while(vet[pos] == MORTO)\n        pos = walk(pos, size, dir);\n    return pos;\n}\n\nvoid mostrar_vetor(int vet[], int size, int e){\n    printf(\"[\");\n    for(int i = 0; i < size; i++){\n        if(vet[i] != MORTO){\n            printf(\" \");\n            if((i == e) && (vet[i] < 0))\n                printf(\"<\");\n                printf(\"%d\", vet[i]);\n            if((i == e) && (vet[i] > 0))\n                printf(\">\");\n        }\n    }\n    printf(\" ]\\n\");\n}\n\nint main(){\n    int size = 0;\n    int esc = 0; //o escolhido\n    int fase = 0;\n    scanf(\"%d %d %d\", &size, &esc, &fase);\n    int vet[size];\n    for(int i = 0; i < size; i++){\n        vet[i] = (i + 1) * fase;\n        fase *= -1;\n    }\n    esc = esc - 1;\n    mostrar_vetor(vet, size, esc);\n    int qtd = size - 1;\n    while(qtd--){\n        int dir = vet[esc] > 0 ? 1 : -1;\n        int saltos = vet[esc] > 0 ? vet[esc] : -vet[esc];\n        int vai_morrer = achar_vivo(vet, size, esc, dir);\n        vet[vai_morrer] = 0;\n        esc = vai_morrer;\n        for(int i = 0; i < saltos; i++)\n            esc = achar_vivo(vet, size, esc, dir);\n        mostrar_vetor(vet, size, esc);\n    }\n}\n\n"
    }
  ],
  "requiredFile": null
}