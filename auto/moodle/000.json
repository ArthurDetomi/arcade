{
  "title": "@000 1. Princesa V1 ",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@000 1. Princesa V1</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\npre > code.sourceCode { white-space: pre; position: relative; }\npre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\npre > code.sourceCode > span:empty { height: 1.2em; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\npre > code.sourceCode { white-space: pre-wrap; }\npre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\npre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"array-1.-princesa-v1-implementa\u00e7\u00e3o-em-vetor-done\">$02_array 1. Princesa V1 &amp; Implementa\u00e7\u00e3o em vetor #done</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><a href=\"https://www.youtube.com/watch?v=uCsD3ZGzMgE\"><img src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/000/__capa.jpg\" /></a></p>\n<p>Um problema bem interessante e antigo da matem\u00e1tica \u00e9 conhecido como Josephus Problem. No link da imagem voc\u00ea pode, por curiosidades aprender bastantes sobre ele e o modelo matem\u00e1tico que se prop\u00f5e a model\u00e1-lo.</p>\n<p>Nosso objetivo aqui ser\u00e1 apenas implementar seu funcionamento.</p>\n<hr />\n<p>No problema, <strong>N</strong> pessoas se colocam numa fila circular e assumem valores de 1 at\u00e9 <strong>N</strong>. Um n\u00famero <strong>E</strong> \u00e9 escolhido para iniciar o jogo. <strong>E</strong> pega a espada, mata o elemento \u00e0 sua frente e passa a espada uma posi\u00e7\u00e3o \u00e0 frente. O jogo continua at\u00e9 que um \u00fanico elemento permane\u00e7a vivo.</p>\n<hr />\n<ul>\n<li>Entrada:\n<ul>\n<li>Os valores de <strong>N</strong> e <strong>E</strong> na primeira linha.</li>\n</ul></li>\n<li>Sa\u00edda:\n<ul>\n<li>Etapa a etapa, os elementos que est\u00e3o vivos na fila circular, indicando com um &gt; quem est\u00e1 com a espada.</li>\n</ul></li>\n</ul>\n<hr />\n<h2 id=\"implementa\u00e7\u00e3o-usando-vetor\">Implementa\u00e7\u00e3o usando vetor</h2>\n<ul>\n<li>Utilize um vetor com dois algoritmos\n<ul>\n<li>marcando os elementos que morrem.</li>\n<li>retirando os elementos que morrem e diminuindo o tamanho do vetor.</li>\n</ul></li>\n</ul>\n<hr />\n<h2 id=\"implementa\u00e7\u00e3o-usando-listas\">Implementa\u00e7\u00e3o usando listas</h2>\n<p>Resolva novamente o problema utilizando uma lista ligada no lugar do vetor.</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">struct</span> Node{</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    <span class=\"dt\">int</span> value;</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    Node * next;</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>};</span></code></pre></div>\n<hr />\n<p>Testes:</p>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01\n3 1\n========\n[ 1&gt; 2 3 ]\n[ 1 3&gt; ]\n[ 3&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02\n3 2\n========\n[ 1 2&gt; 3 ]\n[ 1&gt; 2 ]\n[ 1&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03\n3 3\n========\n[ 1 2 3&gt; ]\n[ 2&gt; 3 ]\n[ 2&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04\n6 3\n========\n[ 1 2 3&gt; 4 5 6 ]\n[ 1 2 3 5&gt; 6 ]\n[ 1&gt; 2 3 5 ]\n[ 1 3&gt; 5 ]\n[ 1&gt; 3 ]\n[ 1&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 05\n9 9\n========\n[ 1 2 3 4 5 6 7 8 9&gt; ]\n[ 2&gt; 3 4 5 6 7 8 9 ]\n[ 2 4&gt; 5 6 7 8 9 ]\n[ 2 4 6&gt; 7 8 9 ]\n[ 2 4 6 8&gt; 9 ]\n[ 2&gt; 4 6 8 ]\n[ 2 6&gt; 8 ]\n[ 2&gt; 6 ]\n[ 2&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 06\n20 1\n========\n[ 1&gt; 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3&gt; 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5&gt; 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7&gt; 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9&gt; 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11&gt; 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13&gt; 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13 15&gt; 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13 15 17&gt; 18 19 20 ]\n[ 1 3 5 7 9 11 13 15 17 19&gt; 20 ]\n[ 1&gt; 3 5 7 9 11 13 15 17 19 ]\n[ 1 5&gt; 7 9 11 13 15 17 19 ]\n[ 1 5 9&gt; 11 13 15 17 19 ]\n[ 1 5 9 13&gt; 15 17 19 ]\n[ 1 5 9 13 17&gt; 19 ]\n[ 1&gt; 5 9 13 17 ]\n[ 1 9&gt; 13 17 ]\n[ 1 9 17&gt; ]\n[ 9&gt; 17 ]\n[ 9&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\n</code></pre>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=00\ninput=3 1\noutput=\"[ 1> 2 3 ]\n[ 1 3> ]\n[ 3> ]\n\"\ngrade reduction=100%\n\n\ncase=01\ninput=3 2\noutput=\"[ 1 2> 3 ]\n[ 1> 2 ]\n[ 1> ]\n\"\ngrade reduction=100%\n\n\ncase=02\ninput=3 3\noutput=\"[ 1 2 3> ]\n[ 2> 3 ]\n[ 2> ]\n\"\ngrade reduction=100%\n\n\ncase=03\ninput=6 3\noutput=\"[ 1 2 3> 4 5 6 ]\n[ 1 2 3 5> 6 ]\n[ 1> 2 3 5 ]\n[ 1 3> 5 ]\n[ 1> 3 ]\n[ 1> ]\n\"\ngrade reduction=100%\n\n\ncase=04\ninput=9 9\noutput=\"[ 1 2 3 4 5 6 7 8 9> ]\n[ 2> 3 4 5 6 7 8 9 ]\n[ 2 4> 5 6 7 8 9 ]\n[ 2 4 6> 7 8 9 ]\n[ 2 4 6 8> 9 ]\n[ 2> 4 6 8 ]\n[ 2 6> 8 ]\n[ 2> 6 ]\n[ 2> ]\n\"\ngrade reduction=100%\n\n\ncase=05\ninput=20 1\noutput=\"[ 1> 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3> 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5> 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7> 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9> 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11> 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13> 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13 15> 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13 15 17> 18 19 20 ]\n[ 1 3 5 7 9 11 13 15 17 19> 20 ]\n[ 1> 3 5 7 9 11 13 15 17 19 ]\n[ 1 5> 7 9 11 13 15 17 19 ]\n[ 1 5 9> 11 13 15 17 19 ]\n[ 1 5 9 13> 15 17 19 ]\n[ 1 5 9 13 17> 19 ]\n[ 1> 5 9 13 17 ]\n[ 1 9> 13 17 ]\n[ 1 9 17> ]\n[ 9> 17 ]\n[ 9> ]\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver_lista.cpp.txt",
      "contents": "#include <iostream>\n#include <list>\nusing namespace std;\n\nvoid show(list<int>& lista, list<int>::iterator& sword){\n    cout << \"[\";\n    for(auto it = lista.begin(); it != lista.end(); ++it){\n        cout << \" \" << *it;\n        if(it == sword)\n            cout << \">\";\n    }\n    cout << \" ]\\n\";\n}\n\nint main(){\n    int qtd = 0;\n    int esc = 0;\n    cin >> qtd >> esc; \n    list<int> lista;\n    for(int i = 1; i <= qtd; i++)\n        lista.push_back(i);\n\n    auto it = lista.begin();\n    std::advance(it, esc - 1);\n    \n    while(lista.size() > 1){\n        show(lista, it);\n        it++;\n        if(it == lista.end()) it = lista.begin();\n        it = lista.erase(it);\n        if(it == lista.end()) it = lista.begin();\n    }\n    show(lista, it);\n}\n"
    },
    {
      "name": "solver_vector.cpp.txt",
      "contents": "#include <stdio.h>\n#include <stdbool.h>\n\nconst int MORTO = 0;\n\n//acha o proximo elemento vivo a partir de inicio + 1\nint achar_vivo(int vet[], int size, int inicio){\n    int pos = (inicio + 1) % size;\n    while(vet[pos] == MORTO)\n        pos = (pos + 1) % size;\n    return pos;\n}\n\nvoid mostrar_vetor(int vet[], int size, int e){\n    printf(\"[\");\n    for(int i = 0; i < size; i++){\n        if(vet[i] != MORTO)\n            printf(\" %d\", vet[i]);\n        if(i == e)\n            printf(\">\");\n    }\n    printf(\" ]\\n\");\n}\n\nint main(){\n    int size = 0;\n    scanf(\"%d\", &size);\n    int vet[size];\n    for(int i = 0; i < size; i++)\n        vet[i] = i + 1;\n    int esc = 0; //o escolhido\n    scanf(\"%d\", &esc);\n    esc = esc - 1;\n    mostrar_vetor(vet, size, esc);\n    int qtd = size - 1;\n    while(qtd--){\n        int vai_morrer = achar_vivo(vet, size, esc);\n        vet[vai_morrer] = 0;\n        esc = achar_vivo(vet, size, vai_morrer);\n        mostrar_vetor(vet, size, esc);\n    }\n}\n\n"
    }
  ],
  "requiredFile": null
}