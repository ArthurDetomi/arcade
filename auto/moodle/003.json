{
  "title": "@003  1. Queimada V1 chamada recursiva         ",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@003 1. Queimada V1 chamada recursiva</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\npre > code.sourceCode { white-space: pre; position: relative; }\npre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\npre > code.sourceCode > span:empty { height: 1.2em; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\npre > code.sourceCode { white-space: pre-wrap; }\npre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\npre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"maze-1.-queimada-v1-chamada-recursiva-done\">$03_maze 1. Queimada V1 chamada recursiva #done</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p>Dado uma matriz que representa espa\u00e7os vazios e \u00e1rvores e um ponto inicial onde come\u00e7a o fogo, retorne a matriz com as \u00e1rvores queimadas.</p>\n<p>A matriz est\u00e1 codificada assim. 1a linha: <code>nl, nc, l, c</code> respectivamente - n\u00famero de linhas e colunas da matriz, linha e coluna onde come\u00e7a o fogo. - Nas linhas subsequentes: - \u2018#\u2019 representa uma \u00e1rvore - \u2018.\u2019 representa um espa\u00e7o vazio - \u2018o\u2019 representa uma \u00e1rvore queimada</p>\n<p>Sa\u00edda esperada: - Imprima a matriz ap\u00f3s a queimada acontecer.</p>\n<h2 id=\"testes\">Testes</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01\n2 3 1 1\n#.#\n.##\n========\n#.o\n.oo\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02\n5 5 0 0\n#..#.\n#...#\n###..\n..#.#\n..###\n========\no..#.\no...#\nooo..\n..o.o\n..ooo\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03\n5 7 2 3\n#..#.#.\n#..####\n####..#\n..#.#..\n#.###.#\n========\no..o.o.\no..oooo\noooo..o\n..o.o..\n#.ooo.#\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n<h2 id=\"ponto-de-partida\">Ponto de partida</h2>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;stdio.h&gt;</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"dt\">void</span> show(<span class=\"dt\">int</span> nl, <span class=\"dt\">int</span> nc, <span class=\"dt\">char</span> * mat){</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>    <span class=\"cf\">for</span>(<span class=\"dt\">int</span> l = <span class=\"dv\">0</span>; l &lt; nl; l++){</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a>        <span class=\"cf\">for</span>(<span class=\"dt\">int</span> c = <span class=\"dv\">0</span>; c &lt; nc; c++)</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>            printf(<span class=\"st\">&quot;</span><span class=\"sc\">%c</span><span class=\"st\">&quot;</span>, mat[l * nc + c]);</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>        puts(<span class=\"st\">&quot;&quot;</span>);</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>    }</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\"></a>}</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\"></a><span class=\"co\">/*</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\"></a><span class=\"co\">para acessar a posicao l, c da matriz voce deve utilizar</span></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\"></a><span class=\"co\">mat[l * nc + c]</span></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\"></a><span class=\"co\">*/</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\"></a><span class=\"dt\">void</span> tocar_fogo(<span class=\"dt\">int</span> nl, <span class=\"dt\">int</span> nc, <span class=\"dt\">char</span> * mat, <span class=\"dt\">int</span> l, <span class=\"dt\">int</span> c){</span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\"></a>    <span class=\"co\">//</span><span class=\"al\">TODO</span><span class=\"co\"> faca seu codigo aqui</span></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\"></a>}</span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\"></a></span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\"></a><span class=\"dt\">int</span> main(){</span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\"></a>    <span class=\"dt\">int</span> nl = <span class=\"dv\">0</span>;</span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\"></a>    <span class=\"dt\">int</span> nc = <span class=\"dv\">0</span>;</span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\"></a>    <span class=\"dt\">int</span> l = <span class=\"dv\">0</span>;</span>\n<span id=\"cb2-22\"><a href=\"#cb2-22\"></a>    <span class=\"dt\">int</span> c = <span class=\"dv\">0</span>;</span>\n<span id=\"cb2-23\"><a href=\"#cb2-23\"></a>    scanf(<span class=\"st\">&quot;</span><span class=\"sc\">%d</span><span class=\"st\"> </span><span class=\"sc\">%d</span><span class=\"st\"> </span><span class=\"sc\">%d</span><span class=\"st\"> </span><span class=\"sc\">%d\\n</span><span class=\"st\">&quot;</span>, &amp;nl, &amp;nc, &amp;l, &amp;c);</span>\n<span id=\"cb2-24\"><a href=\"#cb2-24\"></a>    <span class=\"dt\">char</span> mat[nl][nc];</span>\n<span id=\"cb2-25\"><a href=\"#cb2-25\"></a>    <span class=\"cf\">for</span>(<span class=\"dt\">int</span> l = <span class=\"dv\">0</span>; l &lt; nl; l++)</span>\n<span id=\"cb2-26\"><a href=\"#cb2-26\"></a>        <span class=\"cf\">for</span>(<span class=\"dt\">int</span> c = <span class=\"dv\">0</span>; c &lt; nc; c++)</span>\n<span id=\"cb2-27\"><a href=\"#cb2-27\"></a>            scanf(<span class=\"st\">&quot; </span><span class=\"sc\">%c</span><span class=\"st\">&quot;</span>, &amp;mat[l][c]);</span>\n<span id=\"cb2-28\"><a href=\"#cb2-28\"></a>    tocar_fogo(nl, nc, &amp;mat[<span class=\"dv\">0</span>][<span class=\"dv\">0</span>], l, c);</span>\n<span id=\"cb2-29\"><a href=\"#cb2-29\"></a>    show(nl, nc, &amp;mat[<span class=\"dv\">0</span>][<span class=\"dv\">0</span>]);</span>\n<span id=\"cb2-30\"><a href=\"#cb2-30\"></a>}</span></code></pre></div>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=00\ninput=2 3 1 1\n#.#\n.##\noutput=\"#.o\n.oo\n\"\ngrade reduction=100%\n\n\ncase=01\ninput=5 5 0 0\n#..#.\n#...#\n###..\n..#.#\n..###\noutput=\"o..#.\no...#\nooo..\n..o.o\n..ooo\n\"\ngrade reduction=100%\n\n\ncase=02\ninput=5 7 2 3\n#..#.#.\n#..####\n####..#\n..#.#..\n#.###.#\noutput=\"o..o.o.\no..oooo\noooo..o\n..o.o..\n#.ooo.#\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\n\n#define PROF\n#ifdef PROF\nconst char TREE = '#';\nconst char FIRE = 'o';\nconst char EMPTY = '.'; \n#else\n#endif\n\nvoid show(int nl, int nc, char mat[nl][nc]){\n    for(int l = 0; l < nl; l++){\n        for(int c = 0; c < nc; c++)\n            printf(\"%c\", mat[l][c]);\n        puts(\"\");\n    }\n}\n\nvoid tocar_fogo(int nl, int nc, char mat[nl][nc], int l, int c){\n#ifdef PROF\n    if((l < 0) || (l >= nl) || (c < 0) || (c >= nc))\n        return;\n    if(mat[l][c] != TREE)\n        return;\n    mat[l][c] = FIRE;\n    tocar_fogo(nl, nc, mat, l, c + 1);\n    tocar_fogo(nl, nc, mat, l, c - 1);\n    tocar_fogo(nl, nc, mat, l - 1, c);\n    tocar_fogo(nl, nc, mat, l + 1, c);\n#else\n    //TODO faca seu codigo aqui\n#endif\n}\n\nint main(){\n    int nl = 0;\n    int nc = 0;\n    int l = 0;\n    int c = 0;\n    scanf(\"%d %d %d %d\\n\", &nl, &nc, &l, &c);\n    char mat[nl][nc];\n    for(int l = 0; l < nl; l++)\n        for(int c = 0; c < nc; c++)\n            scanf(\" %c\", &mat[l][c]);\n    tocar_fogo(nl, nc, mat, l, c);\n    show(nl, nc, mat);\n}\n"
    },
    {
      "name": "solver.cpp.txt",
      "contents": "#include <stdio.h>\n\n#define PROF\n#ifdef PROF\nconst char TREE = '#';\nconst char FIRE = 'o';\nconst char EMPTY = '.'; \n#else\n#endif\n\nvoid show(int nl, int nc, char * mat){\n    for(int l = 0; l < nl; l++){\n        for(int c = 0; c < nc; c++)\n            printf(\"%c\", mat[l * nc + c]);\n        puts(\"\");\n    }\n}\n/*\npara acessar a posicao l, c da matriz voce deve utilizar\nmat[l * nc + c]\n*/\nvoid tocar_fogo(int nl, int nc, char * mat, int l, int c){\n#ifdef PROF\n    if((l < 0) || (l >= nl) || (c < 0) || (c >= nc))\n        return;\n    if(mat[l * nc + c] != TREE)\n        return;\n    mat[l * nc + c] = FIRE;\n    tocar_fogo(nl, nc, mat, l, c + 1);\n    tocar_fogo(nl, nc, mat, l, c - 1);\n    tocar_fogo(nl, nc, mat, l - 1, c);\n    tocar_fogo(nl, nc, mat, l + 1, c);\n#else\n    //TODO faca seu codigo aqui\n#endif\n}\n\nint main(){\n    int nl = 0;\n    int nc = 0;\n    int l = 0;\n    int c = 0;\n    scanf(\"%d %d %d %d\\n\", &nl, &nc, &l, &c);\n    char mat[nl][nc];\n    for(int l = 0; l < nl; l++)\n        for(int c = 0; c < nc; c++)\n            scanf(\" %c\", &mat[l][c]);\n    tocar_fogo(nl, nc, &mat[0][0], l, c);\n    show(nl, nc, &mat[0][0]);\n}\n"
    }
  ],
  "requiredFile": {
    "name": "student.cpp",
    "contents": "#include <stdio.h>\n\nvoid show(int nl, int nc, char * mat){\n    for(int l = 0; l < nl; l++){\n        for(int c = 0; c < nc; c++)\n            printf(\"%c\", mat[l * nc + c]);\n        puts(\"\");\n    }\n}\n/*\npara acessar a posicao l, c da matriz voce deve utilizar\nmat[l * nc + c]\n*/\nvoid tocar_fogo(int nl, int nc, char * mat, int l, int c){\n    //TODO faca seu codigo aqui\n}\n\nint main(){\n    int nl = 0;\n    int nc = 0;\n    int l = 0;\n    int c = 0;\n    scanf(\"%d %d %d %d\\n\", &nl, &nc, &l, &c);\n    char mat[nl][nc];\n    for(int l = 0; l < nl; l++)\n        for(int c = 0; c < nc; c++)\n            scanf(\" %c\", &mat[l][c]);\n    tocar_fogo(nl, nc, &mat[0][0], l, c);\n    show(nl, nc, &mat[0][0]);\n}\n"
  }
}